/*
 * Copyright (c) 2008 - 2017 Haulmont Technology Ltd. All Rights Reserved.
 * Haulmont Technology proprietary and confidential.
 * Use is subject to license terms.
 */

buildscript {
    repositories {
        mavenLocal()
        maven {
            credentials {
                username System.getenv('HAULMONT_REPOSITORY_USER')
                password System.getenv('HAULMONT_REPOSITORY_PASSWORD')
            }
            url "http://repository.haulmont.com:8587/nexus/content/groups/shamrock-work/"
        }
        dependencies {
            classpath group: 'com.haulmont.shamrock.gradle', name: 'shamrock-plugin', version: '3.3-SNAPSHOT'
        }
    }
}

plugins {
    id 'java-library'
}

apply(plugin: 'idea')
apply(plugin: 'shamrock-services')

shamrock {
    service {
        group = 'com.haulmont.shamrock'
        version = '1.7'
        name = "shamrock-as-google-${System.getenv('googleProviderName')}-gate"
        snapshot = true

        ports {
            app = Integer.parseInt(System.getenv('googleProviderPort') ?: '9999')
            debug = Integer.parseInt(System.getenv('googleProviderDebugPort') ?: '19999')
            jmx = Integer.parseInt(System.getenv('googleProviderJmxPort') ?: '59999')
        }
    }
    java {
        xmx = '256m'
    }
    jetty {
        version = '9.4.45.v20220203'
        modules {
            module_deploy {

            }
            module_ext {

            }
            module_http {

            }
            module_logging {

            }
            module_jndi {

            }
            module_plus {

            }
            module_annotations {

            }
        }
    }
    kubernetes {
        docker {
            baseImage = 'shamrock-microservices-base-image:temurin11'
        }
    }
}

def monaco_version = '3.3-SNAPSHOT'
def as_commons_version = '2.0-SNAPSHOT'

def coreModule = project(':shamrock-as-google-gate-core')
def rsModule = project(':shamrock-as-google-gate-rs')

configure([coreModule, rsModule]) {
    apply(plugin: 'java')
    apply(plugin: 'idea')
    apply(plugin: 'maven')
    apply(plugin: 'shamrock-services')

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    dependencies {
        testCompile(group: 'com.haulmont.monaco', name: 'monaco-test', version: "${monaco_version}")
        testCompile(group: 'org.testng', name: 'testng', version: '6.14.3')
    }

    test {
        useTestNG()
        scanForTestClasses = false
        includes = ['**/*Test.class']
    }
    
    artifacts {
        archives sourceJar
    }

    compileJava {
        options.encoding = "UTF-8"
    }
}

configure(coreModule) {
    dependencies {
        compile(group: 'com.haulmont.monaco', name: 'monaco-core', version: "$monaco_version")
        compile(group: 'com.haulmont.monaco', name: 'monaco-jetty', version: "$monaco_version")

        compile(group: 'com.haulmont.monaco', name: 'monaco-graylog-reporter', version: "$monaco_version")
        compile(group: 'com.haulmont.monaco', name: 'monaco-sentry-reporter', version: "$monaco_version")

        compile(group: 'com.haulmont.monaco', name: 'monaco-unirest', version: "$monaco_version")

        compile "com.haulmont.shamrock:shamrock-as-commons-model:${as_commons_version}"
        compile "com.haulmont.shamrock:shamrock-as-commons-parsers:${as_commons_version}"
        compile "com.haulmont.shamrock:shamrock-as-commons-utils:${as_commons_version}"
        compile "com.haulmont.shamrock:shamrock-as-commons-gis:${as_commons_version}"

        compile 'com.haulmont.shamrock:shamrock-geo-common:1.2'

        compile 'org.slf4j:jcl-over-slf4j:1.7.21'

        compile 'org.isuper:s2-geometry-library-java:0.0.1'

        compile 'org.apache.commons:commons-lang3:3.6'
        compile 'commons-io:commons-io:2.5'
        compile 'org.apache.commons:commons-collections4:4.1'
        compile 'commons-codec:commons-codec:1.10'
    }

    task deploy(dependsOn: assemble, type: ShamrockDeployJettyTask) {
        excludeConfigDirs = ['database-scripts', 'jetty-conf']
        appJars('shamrock-as-google-gate-core')
    }
}

configure(rsModule) {
    configurations {
        extraLibs
    }

    dependencies {
        compile(coreModule)

        compile "com.haulmont.monaco:monaco-metrics-influxdb:${monaco_version}"
        compile "com.haulmont.monaco:monaco-rs:${monaco_version}"
        extraLibs("com.haulmont.monaco:monaco-rs:${monaco_version}") {
            transitive = false
        }
    }

    jar {
        manifest {
        }
    }
    
    task deploy(dependsOn: [assemble], type: ShamrockDeployJettyTask) {
        excludeConfigDirs = ['database-scripts', 'jetty-conf']
        appJars('shamrock-as-google-gate-core', 'shamrock-as-google-gate-rs')
    }

    deploy {
        doLast {
            def tokens = ["GOOGLE_PROVIDER_NAME": "${System.getenv('googleProviderName')}"]
            println("Tokens:")
            tokens.each { key, value ->
                println("  ${key} -> ${value}")
            }

            def appName = "shamrock-as-google-${System.getenv('googleProviderName')}-gate"
            println("Application name:" + appName)

            def serverDir = new File("$rootDir.absolutePath/deploy/jetty/jetty_base").canonicalPath
            println("Server directory:" + serverDir)

            replaceTokens(new File("$serverDir/webapps/$appName/WEB-INF/web.xml"), tokens)
            new File("$serverDir/conf/$appName").eachFile { file ->
                replaceTokens(file, tokens)
            }
        }
    }

    start.dependsOn deploy
    task restart(dependsOn: [':start'])
}

static void replaceTokens(File f, Map<String, String> tokens) {
    if (f.isFile()) {
        def text = f.text
        for (Map.Entry<String, String> e : tokens.entrySet()) {
            text = text.replace(e.key, e.value)
        }
        f.withWriter { w ->
            w << text
        }
    }
}