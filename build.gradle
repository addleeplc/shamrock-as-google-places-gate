/*
 * Copyright (c) 2008 - 2017 Haulmont Technology Ltd. All Rights Reserved.
 * Haulmont Technology proprietary and confidential.
 * Use is subject to license terms.
 */
allprojects {
    ext.googleProviderName = "${project.hasProperty('googleProviderName') ? googleProviderName : 'GOOGLE_PROVIDER_NAME'}"
}

buildscript {
    repositories {
        mavenLocal()
        maven {
            credentials {
                username System.getenv('HAULMONT_REPOSITORY_USER')
                password System.getenv('HAULMONT_REPOSITORY_PASSWORD')
            }
            url "http://repository.haulmont.com:8587/nexus/content/groups/shamrock-work/"
        }
        dependencies {
            classpath 'com.haulmont.shamrock.gradle:shamrock-plugin:3.0-SNAPSHOT'
        }
    }
}

apply(plugin: 'idea')
apply(plugin: 'shamrock-services')

shamrock {
    service {
        group = 'com.haulmont.shamrock'
        version = '1.3'
        name = "shamrock-as-google-${project.googleProviderName}-gate"
        ports {
            app = Integer.parseInt("${project.hasProperty('googleProviderPort') ? googleProviderPort : 9999}")
            debug = Integer.parseInt("${project.hasProperty('googleProviderDebugPort') ? googleProviderDebugPort : 19999}")
            jmx = Integer.parseInt("${project.hasProperty('googleProviderJmxPort') ? googleProviderJmxPort : 59999}")
        }
    }
    java {
        xmx = '256m'
    }
    jetty {
        version = '9.4.14.v20181114'
        modules {
            module_deploy {

            }
            module_ext {

            }
            module_http {

            }
            module_logging {

            }
            module_jndi {

            }
            module_plus {

            }
            module_annotations {

            }
        }
    }
    kubernetes {
        docker {
            baseImage = 'shamrock-microservices-base-image:openjdk11'
        }
    }
}

def coreModule = project(':shamrock-as-google-gate-core')
def rsModule = project(':shamrock-as-google-gate-rs')

def monaco_version = '3.1-SNAPSHOT'

configure([coreModule, rsModule]) {
    apply(plugin: 'java')
    apply(plugin: 'idea')
    apply(plugin: 'maven')
    apply(plugin: 'shamrock-services')

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    dependencies {
        testCompile(group: 'org.testng', name: 'testng', version: '6.14.3')
    }

    test {
        useTestNG()
        scanForTestClasses = false
        includes = ['**/*Test.class']
    }
    
    artifacts {
        archives sourceJar
    }

    compileJava {
        options.encoding = "UTF-8"
    }
}

configure(coreModule) {
    dependencies {
        compile "com.haulmont.monaco:monaco-core:${monaco_version}"
        compile "com.haulmont.monaco:monaco-config:${monaco_version}"
        compile "com.haulmont.monaco:monaco-graylog-reporter:${monaco_version}"
        compile "com.haulmont.monaco:monaco-sentry-reporter:${monaco_version}"
        compile "com.haulmont.monaco:monaco-unirest:${monaco_version}"

        compile 'com.haulmont.shamrock:shamrock-as-common-data:1.0-SNAPSHOT'
        compile 'com.haulmont.shamrock:shamrock-as-common-utils:1.0-SNAPSHOT'
        compile 'com.haulmont.shamrock:shamrock-as-common-gate:1.0-SNAPSHOT'
        compile 'com.haulmont.shamrock:shamrock-as-common-gis:1.0-SNAPSHOT'

        compile 'com.haulmont.shamrock:shamrock-geo-common:1.2'

        compile 'com.mashape.unirest:unirest-java:1.4.9'

        compile 'org.slf4j:jcl-over-slf4j:1.7.21'

        compile 'org.apache.commons:commons-lang3:3.6'
        compile 'commons-io:commons-io:2.5'
        compile 'org.apache.commons:commons-collections4:4.1'
        compile 'commons-codec:commons-codec:1.10'
    }

    task deploy(dependsOn: assemble, type: ShamrockDeployJettyTask) {
        excludeConfigDirs = ['database-scripts', 'jetty-conf']
        appJars('shamrock-as-google-gate-core')
    }
}

configure(rsModule) {
    configurations {
        extraLibs
    }

    dependencies {
        compile(coreModule)

        compile "com.haulmont.monaco:monaco-metrics-influxdb:${monaco_version}"
        compile "com.haulmont.monaco:monaco-rs:${monaco_version}"
        extraLibs("com.haulmont.monaco:monaco-rs:${monaco_version}") {
            transitive = false
        }
    }

    jar {
        manifest {
        }
    }
    
    task deploy(dependsOn: [assemble], type: ShamrockDeployJettyTask) {
        excludeConfigDirs = ['database-scripts', 'jetty-conf']
        appJars('shamrock-as-google-gate-core', 'shamrock-as-google-gate-rs')
    }

    deploy {
        doLast {
            def tokens = [GOOGLE_PROVIDER_NAME: "${project.googleProviderName}"]

            new File("${getJettyBaseDir()}/shamrock-as-google-GOOGLE_PROVIDER_NAME-gate.xml")
                    .renameTo("${getJettyBaseDir()}/${shamrock.service.name}.xml")

            replaceTokens(new File("${getJettyBaseDir()}/webapps/${shamrock.service.name}/WEB-INF/web.xml"), tokens)
            new File("${getJettyBaseDir()}/conf/${shamrock.service.name}").eachFile { file ->
                replaceTokens(file, tokens)
            }
        }
    }

    start.dependsOn deploy
    task restart(dependsOn: [':start'])
}

static void replaceTokens(File f, Map<String, String> tokens) {
    if (f.isDirectory())
        return

    def text = f.text
    for (Map.Entry<String, String> e : tokens.entrySet()) {
        text = text.replace(e.key, e.value)
    }
    f.withWriter { w ->
        w << text
    }
}